package com.ecommes.app.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataAccessException;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import com.ecommes.app.entity.DetallePedido;
import com.ecommes.app.service.IDetallePedidoService;


@CrossOrigin(origins = {"http://localhost:4200"})
@RestController
@RequestMapping("/api")
public class DetallePedidoController {
	
	@Autowired
	private IDetallePedidoService detallePedidoService;
	
	
	@GetMapping("/DetallePedidos")
	public List<DetallePedido> detallePedido() {
		return detallePedidoService.findAll();
	}
	
	@GetMapping("/DetallePedidos/{id}")
	public ResponseEntity<?> mostrar(@PathVariable Long id) {
		DetallePedido detallePedido = null;
		Map<String, Object> response = new HashMap<>();
		
		try {
			detallePedido = detallePedidoService.findById(id);
			
		} catch (DataAccessException e) {
			response.put("mensaje", "al consultar en la base de datos");
			response.put("error", e.getMessage().concat(": ").concat(e.getMostSpecificCause().getMessage()));
			return new ResponseEntity<Map<String, Object>>(response, HttpStatus.INTERNAL_SERVER_ERROR);			
		}
		if (detallePedido == null) {
			response.put("mensaje", "El producto ID: ".concat(id.toString().concat(", no existe en la base de datos!")));
			return new ResponseEntity<Map<String, Object>>(response, HttpStatus.NOT_FOUND);
			
		}
		
		return new ResponseEntity<DetallePedido> (detallePedido, HttpStatus.OK);
	}
	
	@PostMapping("/DetallePedidos")
	public ResponseEntity<?> create(@RequestBody DetallePedido detallePedido) {
		
		DetallePedido detallePedidoNew = null;
		Map<String, Object> response = new  HashMap<>();
		
		try {
			detallePedidoNew = detallePedidoService.save(detallePedido);
			
		} catch (DataAccessException e) {
			response.put("mensaje", "Error al realizar el insert en la base de datos");
			response.put("error", e.getMessage().concat(": ").concat(e.getMostSpecificCause().getMessage()));
			return new ResponseEntity<Map<String, Object>>(response, HttpStatus.INTERNAL_SERVER_ERROR);
		}		
		response.put("mensaje", "El detalle del pedido ha sido creado con éxito!");
		response.put("cliente", detallePedidoNew);
		
		
		return new ResponseEntity<Map<String, Object>>(response, HttpStatus.CREATED) ;
	}
	
	@PutMapping("/DetallePedidos/{id}")	
	public ResponseEntity<?> update(@RequestBody DetallePedido detallePedido, @PathVariable Long id) {
		
		DetallePedido detallePedidoActual = detallePedidoService.findById(id);
		DetallePedido detallePedidoUpdated = null;
		Map<String, Object> response = new HashMap<>();
		
		try {
			detallePedidoActual.setNumeroOrden(detallePedido.getNumeroOrden());
			detallePedidoActual.setProducto(detallePedido.getProducto());
			detallePedidoActual.setCantidad(detallePedido.getCantidad());
			detallePedidoActual.setValorProducto(detallePedido.getValorProducto());
			
			detallePedidoUpdated = detallePedidoService.save(detallePedidoActual);
			
		} catch (DataAccessException e) {
			response.put("mensaje", "Error al realizar el insert en la base de datos");
			response.put("error", e.getMessage().concat(": ").concat(e.getMostSpecificCause().getMessage()));
			return new ResponseEntity<Map<String, Object>>(response, HttpStatus.INTERNAL_SERVER_ERROR);
			
		}
		
		response.put("mensaje", "El cliente ha sido actualizado con éxito!");
		response.put("cliente", detallePedidoUpdated);				
		
		
	  return new ResponseEntity<Map<String, Object>>(response,HttpStatus.CREATED);
		
	}
	
	@DeleteMapping("/DetallePedidos/{id}")
	public ResponseEntity<?> delete(@PathVariable Long id) {
		
		Map<String, Object> response = new HashMap<>();
		
		try {
			
		} catch (DataAccessException e) {
			// TODO: handle exception
		}
		
		detallePedidoService.delete(id);
	}

}
