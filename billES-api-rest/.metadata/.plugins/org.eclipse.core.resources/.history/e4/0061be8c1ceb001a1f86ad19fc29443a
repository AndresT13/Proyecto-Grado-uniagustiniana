package com.ecommes.app.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataAccessException;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import com.ecommes.app.entity.Marca;
import com.ecommes.app.service.IMarcaService;


@CrossOrigin(origins = {"http://localhost:4200"})
@RestController
@RequestMapping("/api")
public class MarcaController {
	
	@Autowired
	private IMarcaService marcaService;
	
	
	//método para listar
	@GetMapping("/marcas")
	public List<Marca> marca() {
		return marcaService.findAll();
	}
	
	// método para mostrar datos
	@GetMapping("/marcas/{id}")
	public ResponseEntity<?> mostrar(@PathVariable Long id) {
		
		Marca marca = null;
		Map<String, Object> response = new HashMap<>();
		
		try {
			marca = marcaService.findById(id);
			
		} catch (DataAccessException e) {
			response.put("error", e.getMessage().concat(": ").concat(e.getMostSpecificCause().getMessage()));
			return new ResponseEntity<Map<String, Object>>(response, HttpStatus.INTERNAL_SERVER_ERROR);
		}
		if (marca == null) {
			response.put("mensaje", "El producto ID: ".concat(id.toString().concat(", no existe en la base de datos!")));
			return new ResponseEntity<Map<String, Object>>(response, HttpStatus.NOT_FOUND);
			
		}
		
		
		return marcaService.findById(id);
	}
	
	// método para crear 
	@PostMapping("/marcas")
	@ResponseStatus(HttpStatus.CREATED)
	public Marca create(@RequestBody Marca marca) {		
		return marcaService.save(marca);
	}
	
	// método para update o modificar o actualizar
	@PutMapping("/marcas/{id}")
	@ResponseStatus(HttpStatus.CREATED)
	public Marca update(@RequestBody Marca marca, @PathVariable Long id) {
		Marca marcaActual = marcaService.findById(id);
		
	
		marcaActual.setNombre(marca.getNombre());
		marcaActual.setVisible(marca.isVisible());
		marcaActual.setCodigo(marca.getCodigo());
		marcaActual.setCreateAt(marca.getCreateAt());
		
		
		return marcaService.save(marcaActual);
	}
	
	@DeleteMapping("/marcas/{id}")
	@ResponseStatus(HttpStatus.NO_CONTENT)
	public void delete(@PathVariable Long id) {
		marcaService.delete(id);
	}
 
}
